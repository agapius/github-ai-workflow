name: OpenAI Code Review Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  openai_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up DIFF environment variable
        shell: bash
        run: |
          # Use GITHUB_BASE_REF if available; otherwise, default to "main"
          BASE_BRANCH="${GITHUB_BASE_REF:-main}"
          echo "Using base branch: ${BASE_BRANCH}"
          
          # Fetch the base branch with a shallow clone
          git fetch origin ${BASE_BRANCH} --depth=1
          
          echo "Calculating diff vs origin/${BASE_BRANCH}"
          
          # Calculate the merge base; if none is found, fall back to a direct diff
          BASE=$(git merge-base origin/${BASE_BRANCH} HEAD) || true
          if [ -z "$BASE" ]; then
            echo "No merge base found, falling back to diff between origin/${BASE_BRANCH} and HEAD"
            DIFF=$(git diff origin/${BASE_BRANCH} HEAD)
          else
            DIFF=$(git diff "$BASE" HEAD)
          fi
          
          # Save multi-line DIFF variable to the GitHub Actions environment
          echo "DIFF<<EOF" >> $GITHUB_ENV
          echo "$DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "DIFF variable set to:"
          echo "$DIFF"

      - name: Call OpenAI API with Debug Info
        id: openai
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DIFF: ${{ env.DIFF }}
        run: |
          set -x  # Enable shell debugging
          
          # Print the DIFF variable for debugging
          echo "DIFF content:"
          echo "${DIFF}"
          
          # Build the multi-line prompt using printf
          PROMPT=$(printf '%s\n' "You are a senior Python code reviewer. Review this code diff thoroughly." \
          "Tasks:" \
          "1. Look for bugs or logical issues in the code." \
          "2. Ensure all Python functions have docstrings that begin with \"This function will ...\"." \
          "3. If everything is perfect, respond with only PASS (all caps)." \
          "4. Otherwise, provide specific and concise suggestions.")
          echo "PROMPT content:"
          echo "${PROMPT}"
          
          # Create the JSON payload using jq
          BODY=$(jq -n --arg diff "${DIFF}" --arg prompt "$PROMPT" '{
            model: "gpt-3.5-turbo",
            messages: [
              { "role": "system", "content": $prompt },
              { "role": "user", "content": $diff }
            ]
          }')
          echo "BODY content:"
          echo "${BODY}"
          
          # Call the OpenAI API
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$BODY")
          echo "API RESPONSE:"
          echo "$RESPONSE"
          
          # Save the API response for inspection
          echo "$RESPONSE" > response.json
          
          # Check for errors in the API response
          ERROR_MSG=$(jq -r '.error.message // empty' response.json)
          if [[ -n "$ERROR_MSG" ]]; then
            echo "::error::OpenAI API error: $ERROR_MSG"
            exit 1
          fi
          
          # Extract and print the suggestions from the API response
          SUGGESTIONS=$(jq -r '.choices[0].message.content' response.json)
          echo "SUGGESTIONS: ${SUGGESTIONS}"
          
          # Save suggestions to the GitHub Actions environment
          echo "SUGGESTIONS<<EOF" >> $GITHUB_ENV
          echo "$SUGGESTIONS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
